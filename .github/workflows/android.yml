name: Build Android APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      # SDK/NDK Paths
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_NDK_ROOT: ${{ github.workspace }}/android-sdk/ndk/24
      ANDROID_BUILD_TOOLS_REVISION: 33.0.2

      # Skip p4a auto-install
      P4A_SKIP_SDK_INSTALL: 1
      P4A_BOOTSTRAP: sdl2
      BUILDOZER_ANDROID_NDK_VERSION: 24

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Android SDK & Buildozer
        uses: actions/cache@v3
        id: cache-sdk
        with:
          path: |
            android-sdk
            .buildozer
          key: android-sdk-${{ hashFiles('buildozer.spec') }}
          restore-keys: android-sdk-

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install system dependencies
        run: |
          sudo apt update -qq
          sudo apt install -y \
            unzip \
            openjdk-17-jdk \
            wget \
            python3-pip \
            python3-setuptools \
            python3-wheel \
            libffi-dev \
            libssl-dev \
            libsqlite3-dev \
            libjpeg-dev \
            libfreetype6-dev \
            zlib1g-dev \
            build-essential \
            libgl1-mesa-dev

      - name: Install Apache Ant
        run: |
          wget https://archive.apache.org/dist/ant/binaries/apache-ant-1.10.13-bin.tar.gz
          tar -xzf apache-ant-1.10.13-bin.tar.gz
          echo "${{ github.workspace }}/apache-ant-1.10.13/bin" >> $GITHUB_PATH

      - name: Install Cython and Buildozer
        run: |
          pip install --upgrade pip
          pip install Cython==0.29.33
          pip install buildozer --upgrade

      - name: Download Android SDK Command-line Tools
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          mkdir -p android-sdk/cmdline-tools
          cd android-sdk/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          mv cmdline-tools latest
          rm -f commandlinetools-linux-9477386_latest.zip

      - name: Download Android NDK r24
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          mkdir -p android-sdk/ndk
          cd android-sdk/ndk
          wget https://dl.google.com/android/repository/android-ndk-r24-linux.zip -O ndk.zip
          unzip -q ndk.zip
          mv android-ndk-r24 24
          rm ndk.zip

      - name: Add SDK tools to PATH
        run: |
          echo "${{ github.workspace }}/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "${{ github.workspace }}/android-sdk/platform-tools" >> $GITHUB_PATH

      - name: Accept Android Licenses
        run: |
          mkdir -p $ANDROID_SDK_ROOT/licenses
          # Android SDK License
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
          # Google SDK License (for optional components)
          echo "84831b94b44d83e104ad51181f92d3acc7736318" > $ANDROID_SDK_ROOT/licenses/android-googlesdk-license

      - name: Install SDK Components (33.0.2 only)
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          sdkmanager --sdk_root=$ANDROID_SDK_ROOT \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;33.0.2"

      - name: Verify aidl is available
        run: |
          ls -la $ANDROID_SDK_ROOT/build-tools/33.0.2/ | grep aidl
          if [ ! -f "$ANDROID_SDK_ROOT/build-tools/33.0.2/aidl" ]; then
            echo "‚ùå aidl not found! Build tools not installed correctly."
            exit 1
          fi

      - name: Build APK (offline, no download)
        run: |
          export P4A_SKIP_BOOTSTRAP_BUILD=True
          export P4A_SKIP_PYTHON_INSTALL=True
          export P4A_SKIP_SOURCE_CHECK=True
          export ANDROIDSDK="$ANDROID_SDK_ROOT"
          export ANDROIDNDK="$ANDROID_NDK_ROOT"
          export ANDROIDAPI="33"
          export NDKAPI="24"

          buildozer android debug --no-update --no-color

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SmartLift-APK
          path: bin/*.apk
          if-no-files-found: error
