name: Build Android APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_NDK_ROOT: ${{ github.workspace }}/android-sdk/ndk/27.2.12479018
      ANDROID_API: 33
      NDK_API: 21
      ANDROID_BUILD_TOOLS: 35.0.0
      DIST_NAME: smartlift

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-

      - name: Cache Android SDK
        uses: actions/cache@v3
        id: cache-sdk
        with:
          path: android-sdk/cmdline-tools/latest
          key: sdk-${{ env.ANDROID_API }}-${{ env.ANDROID_BUILD_TOOLS }}-${{ hashFiles('main.py') }}
          restore-keys: sdk-

      - name: Cache Android NDK
        uses: actions/cache@v3
        id: cache-ndk
        with:
          path: android-sdk/ndk/27.2.12479018
          key: ndk-${{ env.NDK_API }}-27.2.12479018
          restore-keys: ndk-

      - name: Cache python-for-android build environment
        uses: actions/cache@v3
        id: cache-p4a
        with:
          path: .p4a/dists/${{ env.DIST_NAME }}
          key: p4a-${{ env.DIST_NAME }}-${{ hashFiles('requirements.txt') }}
          restore-keys: p4a-${{ env.DIST_NAME }}-

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install system dependencies
        run: |
          set -euo pipefail
          sudo apt update -qq
          sudo apt install -y \
            unzip \
            openjdk-17-jdk \
            wget \
            python3-pip \
            libffi-dev \
            libssl-dev \
            libsqlite3-dev \
            libjpeg-dev \
            zlib1g-dev \
            build-essential \
            libgl1-mesa-dev

      - name: Install Apache Ant (cached)
        run: |
          set -euo pipefail
          ANT_DIR="${{ github.workspace }}/apache-ant-1.10.13"
          if [ ! -d "$ANT_DIR" ]; then
            wget https://archive.apache.org/dist/ant/binaries/apache-ant-1.10.13-bin.tar.gz
            tar -xzf apache-ant-1.10.13-bin.tar.gz
          fi
          echo "$ANT_DIR/bin" >> $GITHUB_PATH

      - name: Install Cython and p4a
        run: |
          set -euo pipefail
          pip install --upgrade pip
          pip install Cython==0.29.33
          pip install --upgrade git+https://github.com/kivy/python-for-android.git@develop

      - name: Patch libffi recipe (fail on missing)
        run: |
          set -euo pipefail
          P4A_DIR=$(python -c "import pythonforandroid; print(pythonforandroid.__file__.replace('__init__.py', ''))")
          LIBFFI_RECIPE="$P4A_DIR/recipes/libffi/__init__.py"
          if [ ! -f "$LIBFFI_RECIPE" ]; then
            echo "❌ libffi recipe not found at $LIBFFI_RECIPE"
            ls -la $(dirname $P4A_DIR/recipes/libffi)
            exit 1
          fi
          sed -i '/"LDFLAGS=/a\        env["HAVE_HIDDEN"] = "0"' "$LIBFFI_RECIPE"
          sed -i 's/"--enable-shared"/"--enable-shared", "--disable-raw-api"/' "$LIBFFI_RECIPE"
          echo "✅ libffi recipe patched successfully!"

      - name: Download Android SDK Command-line Tools (retry + checksum)
        if: ${{ steps.cache-sdk.outputs.cache-hit != 'true' }}
        run: |
          set -euo pipefail
          SDK_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          SDK_SHA="bd1aa17c7ef10066949c88dc6c9c8d536be27f992a1f3b5a584f9bd2ba5646a0"
          mkdir -p android-sdk/cmdline-tools
          cd android-sdk/cmdline-tools
          for i in {1..5}; do
            echo "Attempt $i: downloading Android SDK command-line tools..."
            wget --timeout=30 --tries=3 "$SDK_URL" -O sdk.zip && break
            echo "❌ Download failed, retrying in 15 seconds..."
            rm -f sdk.zip
            sleep 15
          done
          if [ ! -f sdk.zip ]; then
            echo "❌ Failed to download SDK after 5 attempts"; exit 1
          fi
          echo "✅ Download complete, verifying checksum..."
          ACTUAL_SHA=$(sha256sum sdk.zip | cut -d' ' -f1)
          if [ "$ACTUAL_SHA" = "$SDK_SHA" ]; then
            echo "✅ Checksum verified"
          else
            echo "❌ Checksum failed!"
            echo "Expected: $SDK_SHA"
            echo "Got:      $ACTUAL_SHA"
            exit 1
          fi
          unzip -q sdk.zip
          mkdir -p latest
          mv cmdline-tools/* latest/
          rmdir cmdline-tools
          rm -f sdk.zip

      - name: Add SDK tools to PATH
        run: |
          set -euo pipefail
          echo "${{ github.workspace }}/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "${{ github.workspace }}/android-sdk/platform-tools" >> $GITHUB_PATH

      - name: Accept licenses
        run: |
          set -euo pipefail
          mkdir -p $ANDROID_SDK_ROOT/licenses
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license

      - name: Install SDK Components
        if: ${{ steps.cache-sdk.outputs.cache-hit != 'true' }}
        run: |
          set -euo pipefail
          sdkmanager --sdk_root=$ANDROID_SDK_ROOT \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;35.0.0"

      - name: Download Android NDK r27c (retry + checksum)
        if: ${{ steps.cache-ndk.outputs.cache-hit != 'true' }}
        run: |
          set -euo pipefail
          NDK_URL="https://dl.google.com/android/repository/android-ndk-r27c-linux.zip"
          NDK_SHA="ac3025e28bcdb1c2fdc61ac5b7a5b0575870b798baf4f1b594a4db78b82b45a6"
          mkdir -p ${{ github.workspace }}/android-sdk/ndk
          cd ${{ github.workspace }}/android-sdk/ndk
          for i in {1..5}; do
            echo "Attempt $i: downloading Android NDK r27c..."
            wget --timeout=30 --tries=3 "$NDK_URL" -O ndk.zip && break
            echo "❌ Download failed, retrying in 15 seconds..."
            rm -f ndk.zip
            sleep 15
          done
          if [ ! -f ndk.zip ]; then
            echo "❌ Failed to download NDK after 5 attempts"; exit 1
          fi
          echo "✅ Download complete, verifying checksum..."
          ACTUAL_SHA=$(sha256sum ndk.zip | cut -d' ' -f1)
          if [ "$ACTUAL_SHA" = "$NDK_SHA" ]; then
            echo "✅ Checksum verified"
          else
            echo "❌ Checksum failed!"
            echo "Expected: $NDK_SHA"
            echo "Got:      $ACTUAL_SHA"
            exit 1
          fi
          unzip -q ndk.zip
          mv android-ndk-r27c 27.2.12479018
          rm -f ndk.zip

      - name: Build APK with p4a directly
        run: |
          set -euo pipefail
          p4a apk \
            --private . \
            --package=org.example.smartlift \
            --name="SmartLift" \
            --version=1.0 \
            --bootstrap=sdl2 \
            --requirements=python3,kivy==2.2.1,pillow,sdl2 \
            --arch=arm64-v8a \
            --copy-libs \
            --dist-name=${{ env.DIST_NAME }} \
            --android-api=$ANDROID_API \
            --ndk-api=$NDK_API \
            --sdk-dir=$ANDROID_SDK_ROOT \
            --ndk-dir=$ANDROID_NDK_ROOT \
            --whitelist=whitelist.txt \
            --presplash=Preplash.png \
            --icon=Icon.png \
            --orientation=portrait \
            --permission=INTERNET \
            --wakelock \
            --release \
            --color=always

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: SmartLift-APK
          path: dist/${{ env.DIST_NAME }}/*.apk
          if-no-files-found: error
