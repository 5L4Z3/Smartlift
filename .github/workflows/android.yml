name: Android APK Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      SDK_URL: https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
      SDK_SHA: 15f4a3fddfd7ad62d3a5b450f8b93f4dbfa1f09d6e853b3c7bafbd8aab5b6b89
      NDK_URL: https://dl.google.com/android/repository/android-ndk-r27c-linux.zip
      NDK_SHA: 41036c703a9b3348b9fc46b5b86d744560d016aebf089f72bdf2a70eab2e726b

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            openjdk-17-jdk unzip wget git python3-pip python3-setuptools \
            build-essential autoconf libtool pkg-config zlib1g-dev

      - name: Cache Android SDK
        id: cache-sdk
        uses: actions/cache@v4
        with:
          path: android-sdk
          key: ${{ runner.os }}-android-sdk

      - name: Download Android SDK (retry + checksum)
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          set -e
          mkdir -p android-sdk/cmdline-tools
          cd android-sdk/cmdline-tools

          for i in {1..5}; do
            echo "Attempt $i: downloading Android SDK..."
            wget --timeout=30 --tries=3 "$SDK_URL" -O sdk.zip && break
            echo "❌ Download failed, retrying in 15s..."
            rm -f sdk.zip
            sleep 15
          done

          if [ ! -f sdk.zip ]; then
            echo "❌ Failed to download SDK after 5 attempts"; exit 1
          fi

          echo "$SDK_SHA  sdk.zip" | sha256sum -c --status || { echo "❌ SDK checksum failed"; exit 1; }

          unzip -q sdk.zip
          mkdir -p latest
          mv cmdline-tools/* latest/
          rmdir cmdline-tools || true
          rm -f sdk.zip

      - name: Cache Android NDK
        id: cache-ndk
        uses: actions/cache@v4
        with:
          path: android-ndk
          key: ${{ runner.os }}-android-ndk

      - name: Download Android NDK (retry + checksum)
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: |
          set -e
          mkdir -p android-ndk
          cd android-ndk

          for i in {1..5}; do
            echo "Attempt $i: downloading Android NDK..."
            wget --timeout=30 --tries=3 "$NDK_URL" -O ndk.zip && break
            echo "❌ Download failed, retrying in 15s..."
            rm -f ndk.zip
            sleep 15
          done

          if [ ! -f ndk.zip ]; then
            echo "❌ Failed to download NDK after 5 attempts"; exit 1
          fi

          echo "$NDK_SHA  ndk.zip" | sha256sum -c --status || { echo "❌ NDK checksum failed"; exit 1; }

          unzip -q ndk.zip
          rm -f ndk.zip

      - name: Set ANDROID_HOME and NDK env
        run: |
          echo "ANDROID_HOME=$GITHUB_WORKSPACE/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$GITHUB_WORKSPACE/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$GITHUB_WORKSPACE/android-ndk/android-ndk-r27c" >> $GITHUB_ENV
          echo "PATH=$GITHUB_WORKSPACE/android-sdk/cmdline-tools/latest/bin:$GITHUB_WORKSPACE/android-sdk/platform-tools:$PATH" >> $GITHUB_ENV

      - name: Install Buildozer
        run: |
          python3 -m pip install --upgrade pip
          pip install buildozer cython

      - name: Patch libffi recipe (fix LT_SYS_SYMBOL_USCORE)
        run: |
          set -e
          python3 patch_libffi.py

      - name: Build APK with Buildozer
        run: |
          set -e
          buildozer android debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: SmartLift-APK
          path: bin/*.apk
